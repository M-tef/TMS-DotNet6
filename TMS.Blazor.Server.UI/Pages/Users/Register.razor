@page "/Users/Register"
@inject IClient httpClient
@inject NavigationManager navManager

@if (string.IsNullOrEmpty(messege) == false)
{
    <div class="alert alert-danger">
        <p>@messege</p>
    </div>
}
<h3>Register New Account</h3>
<div class=" ="card-body>
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator/>
        <ValidationSummary/> 
        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName"/>
            <ValidationMessage For="@(()=>RegistrationModel.FirstName)"/>
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName"/>
            <ValidationMessage For="@(()=>RegistrationModel.LastName)"/>
        </div>
        <div class="form-group">
            <label for="email">EMail Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email"/>
            <ValidationMessage For="@(()=>RegistrationModel.Email)"/>
        </div>
        <div class="form-group">
            <label for="username">User Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Username" />
            <ValidationMessage For="@(()=>RegistrationModel.Username)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password"/>
            <ValidationMessage For="@(()=>RegistrationModel.Password)"/>
        </div>

        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>

</div>


@code {
    UserCreateDto RegistrationModel = new UserCreateDto();
    string messege = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode>=200 && ex.StatusCode<=299)
            {
                NavigateToLogin();
            }
            messege = ex.Message;
        }
        
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("users/login");
    }
}
